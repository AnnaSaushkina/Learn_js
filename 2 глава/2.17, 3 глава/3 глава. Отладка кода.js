//  Найди и исправь ошибки

function processUsers(users) {
    const result = [];
    
   let newProp = { ...users }; // вместо прохода циклом по объекту, который его не находит используем поверхностное копирование объекта
        result.push({
            name: newProp.name.toUpperCase(), // берем данные не напрямую из параметра, из которого они не находятся, а из копии
            age: newProp.age * 2 // убираем обращение по индексу к свойству объекта

        });
    
    return result;
}

const newObj = {name: 'Вася', age: 12} // не хватало данных на вход 

console.log(processUsers(newObj)) // и вызова функции


// Задача 11: Анализ стека вызовов
function a() {
    return b() + 1;
}

function b() {
    return c() * 2;
}

function c() {
    const num = 1;
    return num; // если мы возвращаем не напрямую переменную, то произойдет ошибка
}

// Вызови a() и проанализируй стек вызовов
console.log(a())
// сначала мы попадаем на возврат функции a(), которая возвращает b(), которая возвращает c() с проинициализированным знаечнием для переменной. мы возвращаем это значение как результат функции c(), вызов которой внутри функции b() со значением 1 происзводит вычислительную операцию. результат этого вычисления становится возвращаемым результатом для функции b(). для функции a() происходит та же итерация и результат ее вызова возвращает результат вызова () с математ. операцией.