// ▎Задача 1: Объяснение

// Объясните, что делает директива "use strict" и какие преимущества она предоставляет. Приведите примеры ошибок, которые могут быть пойманы с помощью строгого режима.

// Более быстро

// ▎Задача 2: Исправление кода

// Рассмотрите следующий код и исправьте его, чтобы он работал в строгом режиме:

function myFunction() {
  'use strict';
  undeclaredVariable = 10; // Ошибка: переменная не объявлена
  return undeclaredVariable;
}
console.log(myFunction());

//Добавляем let тк иначе создается переменная в глобоальной области видимости которую не распознает строгий режим
function myFunction() {
  'use strict';
  let undeclaredVariable = 10; // 10
  return undeclaredVariable;
}
console.log(myFunction());

// ▎Задача 3: Ошибки в строгом режиме

// Напишите код, который будет работать в обычном режиме, но вызовет ошибку в строгом режиме. Например, попытка удалить переменную:

('use strict');
var x = 10;
delete x; // Ошибка: В строгом режиме мы не можем удалить переменную.
console.log(x);

('use strict');
var x = 10;
x = null;
console.log(x);
//  Можем перезаписать ее на пустое значение

// ▎Задача 4: Применение к объектам ПОПОЗЖЕ ВЕРНУТЬСЯ

// Напишите код, который демонстрирует, как "use strict" влияет на свойства объектов. Создайте объект и попытайтесь добавить ему свойство с именем, которое является зарезервированным словом.

('use strict');
const obj = {};
obj.get = 'value'; // Ошибка: 'get' является зарезервированным словом

console.log(obj);

// ▎Задача 5: Лексическая область видимости

// Объясните, как "use strict" влияет на лексическую область видимости и использование this внутри функций.

('use strict');
function showThis() {
  console.log(this); // undefined вместо глобального объекта
}
showThis();
// Строгий режим для this внутри функции запрещает доступ к глобальному объекту window. Вместо изменений его свойств возвращается undefined. При изменении свойств this возвращает ошибку.

// ### Задача 6: Включение строгого режима
// Создайте простую функцию, которая будет включать строгий режим при помощи директивы use strict. Проверьте, что вы не можете использовать не объявленные переменные (например, x = 10).

function testStrictMode() {
  'use strict';
  x = 10;
}
testStrictMode(); // нельзя обращаться к необъявленным переменным

// ### Задача 7: Запрет на дублирование параметров
// Напишите функцию с двумя параметрами, которые имеют одинаковые имена. Включите строгий режим и убедитесь, что это вызывает ошибку.

function duplicateParameters(a, a) {
  'use strict';
  return a + a;
}
duplicateParameters(2, 4); //Вернет ошибку Duplicate parameter name not allowed in this context

// ### Задача 8: Запрет на присваивание к внешним объектам
// Попробуйте присвоить значение несуществующему свойству объекта. Включите строгий режим и проверьте, что это вызывает ошибку.

function assignToNonExistentProperty(x) {
  'use strict';
  x = { p1: 10, p2: 20 };
  return x;
}
assignToNonExistentProperty(console.log());
// Использование объекта без объявления не допускается, но!
//Вопрос!

// ### Задача 9: Измените глобальные переменные
// Создайте глобальную переменную и проверьте, можно ли ее переопределить внутри функции, использующей строгий режим. Убедитесь, что это вызывает ошибку, если вы пытаетесь изменить eval или arguments.

// let arguments
// function changeArguments() {
//     'use strict';
//     arguments = 5;
//     return arguments
// }
// console.log(changeArguments())
// Обращение к внешней переменной вызывает ошибку
