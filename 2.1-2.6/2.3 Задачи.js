// ▎Задача 1: Объяснение

// Объясните, что делает директива "use strict" и какие преимущества она предоставляет. Приведите примеры ошибок, которые могут быть пойманы с помощью строгого режима.



// ▎Задача 2: Исправление кода

// Рассмотрите следующий код и исправьте его, чтобы он работал в строгом режиме:

function myFunction() {
    undeclaredVariable = 10; // Ошибка: переменная не объявлена
    return undeclaredVariable;
}
console.log(myFunction());


// ▎Задача 3: Ошибки в строгом режиме

// Напишите код, который будет работать в обычном режиме, но вызовет ошибку в строгом режиме. Например, попытка удалить переменную:

"use strict";
var x = 10;
delete x; // Ошибка: нельзя удалить переменную



// ▎Задача 4: Использование с классами

// Создайте класс в строгом режиме и попытайтесь использовать зарезервированное слово (например, class) как имя метода. Объясните, почему это вызовет ошибку.

"use strict";
class MyClass {
    constructor() {
        this.value = 0;
    }
    class() { // Ошибка: 'class' является зарезервированным словом
        return this.value;
    }
}


// ▎Задача 5: Применение в функциях

// Напишите функцию, которая использует "use strict" и покажите, как она предотвращает создание глобальных переменных.

"use strict";
function testStrict() {
    x = 10; // Ошибка: x не объявлена
}
testStrict();


// ▎Задача 6: Применение к объектам

// Напишите код, который демонстрирует, как "use strict" влияет на свойства объектов. Создайте объект и попытайтесь добавить ему свойство с именем, которое является зарезервированным словом.

"use strict";
const obj = {};
obj.get = "value"; // Ошибка: 'get' является зарезервированным словом


// ▎Задача 7: Лексическая область видимости

// Объясните, как "use strict" влияет на лексическую область видимости и использование this внутри функций.

"use strict";
function showThis() {
    console.log(this); // undefined вместо глобального объекта
}
showThis();
